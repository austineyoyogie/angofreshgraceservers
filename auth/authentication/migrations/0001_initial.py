# Generated by Django 4.2.15 on 2024-08-17 06:28

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('email', models.EmailField(db_index=True, error_messages={'unique': 'A user with that email already exists.'}, help_text='Required. a valid email address for verification ', max_length=254, unique=True, validators=[django.core.validators.RegexValidator('^[A-Za-z0-9._@]+$', 'Enter a valid email address. This value may contain only letters, numbers @ and ._ characters.', 'invalid')], verbose_name='email address')),
                ('first_name', models.CharField(blank=True, error_messages={'': 'Required. a valid characters.'}, help_text='Required. a valid first name', max_length=45, validators=[django.core.validators.RegexValidator('^[A-Za-z]+$', 'Required a valid name characters. ', 'invalid')], verbose_name='first name')),
                ('last_name', models.CharField(blank=True, error_messages={'': 'Required. a valid characters.'}, help_text='Required. a valid last name', max_length=45, validators=[django.core.validators.RegexValidator('^[A-Za-z]+$', 'Required. a valid name characters. ', 'invalid')], verbose_name='last name')),
                ('telephone', models.CharField(error_messages={'unique': 'A user with that mobile number already exists.'}, help_text='Required. a valid mobile number for verification ', max_length=45, validators=[django.core.validators.RegexValidator('^[0-9-._ ]+$', 'Enter a valid mobile number. This value may contain only numbers ', 'invalid')], verbose_name='telephone')),
                ('token', models.CharField(max_length=255, verbose_name='activate token')),
                ('is_verified', models.BooleanField(default=False, help_text='Designates whether this user should be allow to have access.', verbose_name='verified status')),
                ('is_using_mfa', models.BooleanField(default=False, help_text='Designates whether this user account access code.', verbose_name='is using mfg')),
                ('is_enabled', models.BooleanField(default=False, help_text='Designates whether this user account is enabled.', verbose_name='is enabled')),
                ('is_not_locked', models.BooleanField(default=False, help_text='Designates whether this user account is locked.', verbose_name='is not locked')),
                ('is_moderator', models.BooleanField(default=False, help_text='Designates whether this user should be treated as moderator.', verbose_name='moderator status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin panel. ', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=False, help_text='Designates whether this user should be treated as active. Deactivate this instead of deleting accounts.', verbose_name='active statue')),
                ('is_superuser', models.BooleanField(default=True, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('last_login', models.DateTimeField(auto_now=True, verbose_name='last login')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('deleted_at', models.DateTimeField(auto_now=True, verbose_name='deleted at')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User Register',
                'verbose_name_plural': 'User Registers',
            },
        ),
    ]
